# age_gap_analytics

# def prob_dthhrdy_lt (L, target_dthhrdy_value, silent=False):
#     # Filter data points less than 0
#     less_than_L_indices = data_points < L
#     data_points_lt_L = data_points[less_than_L_indices]
#     dthhrdy_values_lt_L = dthhrdy_values[less_than_L_indices]

#     # Calculate the number of points with the target DTHHRDY value and less than 0
#     target_indices = dthhrdy_values_lt_L == target_dthhrdy_value
#     num_target_dthhrdy_lt_0 = np.sum(target_indices)

#     # Calculate the total number of points less than 0
#     num_total_lt_0 = len(data_points_lt_L)

#     # Calculate the conditional probability
#     if num_total_lt_0 > 0:
#         p2 = num_target_dthhrdy_lt_0 / num_total_lt_0
#     else:
#         p2 = 0
#     if not silent:
#         print (f"p(dthhrdy={target_dthhrdy_value}, agegap<{L}) = {p2}")
#     return p2

# def prob_dthhrdy_gt (U, target_dthhrdy_value, silent=False):
#     # Filter data points greater than 5
#     greater_than_U_indices = data_points > U
#     data_points_gt_U = data_points[greater_than_U_indices]
#     dthhrdy_values_gt_U = dthhrdy_values[greater_than_U_indices]

#     # Calculate the number of points with the target DTHHRDY value and greater than 5
#     target_indices = dthhrdy_values_gt_U == target_dthhrdy_value
#     num_target_dthhrdy_gt_U = np.sum(target_indices)

#     # Calculate the total number of points greater than 5
#     num_total_gt_U = len(data_points_gt_U)

#     # Calculate the conditional probability
#     if num_total_gt_U > 0:
#         p1 = num_target_dthhrdy_gt_U / num_total_gt_U
#     else:
#         p1 = 0
#     if not silent:
#         print (f"p(dthhrdy={target_dthhrdy_value}, agegap>{U}) = {p1}")
#     return p1

# def prob_dthhrdy_range (L, U, target_dthhrdy_value, silent=False):
#     greater_than_L_indices = data_points > L
#     less_than_U_indices = data_points < U
#     range_indices = np.logical_and(greater_than_L_indices, less_than_U_indices)

#     data_points_range = data_points[range_indices]
#     dthhrdy_values_range = dthhrdy_values[range_indices]

#     target_indices = dthhrdy_values_range == target_dthhrdy_value
#     num_target_dthhrdy_range = np.sum(target_indices)

#     num_total_range = len(data_points_range)

#     if num_total_range > 0:
#         p = num_target_dthhrdy_range / num_total_range
#     else:
#         p = 0
#     if not silent:
#         print (f"p(dthhrdy={target_dthhrdy_value}, {L}<agegap<{U}) = {p}")
#     return p

